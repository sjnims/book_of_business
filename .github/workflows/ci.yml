name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  RAILS_ENV: test
  BUNDLE_JOBS: 4
  BUNDLE_RETRY: 3
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/book_of_business_test

# Cancel in-progress workflows when a new workflow is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Security scanning for Ruby dependencies and code
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Cache security tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/gem
            vendor/bundle
          key: ${{ runner.os }}-security-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-security-

      - name: Run Brakeman security scan
        run: |
          bin/brakeman --no-pager --format json --output tmp/brakeman.json
          bin/brakeman --no-pager

      - name: Upload Brakeman report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: brakeman-report
          path: tmp/brakeman.json
          retention-days: 30

      - name: Check for vulnerable dependencies
        run: |
          gem install bundler-audit
          bundle audit check --update

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@v3.88.0
        if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.event.before != '0000000000000000000000000000000000000000')
        with:
          path: ./
          base: ${{ github.event.before }}
          head: ${{ github.event.after }}
          extra_args: --only-verified

  # JavaScript security scanning
  scan_js:
    name: JavaScript Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Audit JavaScript dependencies
        run: |
          bin/importmap audit || true  # Don't fail if no JS deps

      - name: Run ESLint security plugin
        if: false  # Enable when JS code is added
        run: |
          npm install -D eslint eslint-plugin-security
          npx eslint --ext .js,.jsx .

  # Code quality and style checking
  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For git diff

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Run RuboCop
        run: |
          bin/rubocop -f github -f json -o tmp/rubocop.json

      - name: Upload RuboCop report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rubocop-report
          path: tmp/rubocop.json
          retention-days: 30

      - name: Check for asset precompilation issues
        run: |
          bin/rails assets:precompile

      - name: Verify no uncommitted Gemfile.lock changes
        run: |
          git diff --exit-code Gemfile.lock || (echo "::error::Gemfile.lock is out of sync" && exit 1)

  # Main test suite with coverage
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [security, lint]  # Only run if security and lint pass

    strategy:
      fail-fast: false
      matrix:
        ruby-version: ['3.4.4']

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: book_of_business_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/ci.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            git \
            libpq-dev \
            libyaml-dev

      - name: Set up Chrome
        run: |
          # Ubuntu runners have Chrome pre-installed
          google-chrome --version || echo "Chrome not found"
          # Set Chrome binary location for Rails system tests
          echo "SELENIUM_CHROME_BINARY=$(which google-chrome || echo '/usr/bin/google-chrome')" >> $GITHUB_ENV

      - name: Set up Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true

      - name: Cache Rails assets
        uses: actions/cache@v4
        with:
          path: |
            public/assets
            tmp/cache/assets
          key: ${{ runner.os }}-assets-${{ hashFiles('app/assets/**/*', 'app/javascript/**/*', 'config/initializers/assets.rb') }}
          restore-keys: |
            ${{ runner.os }}-assets-

      - name: Cache test artifacts
        uses: actions/cache@v4
        with:
          path: |
            coverage/assets
            tmp/cache
          key: ${{ runner.os }}-test-${{ matrix.ruby-version }}-${{ hashFiles('test/**/*') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ matrix.ruby-version }}-

      - name: Setup test database
        run: |
          bin/rails db:create
          bin/rails db:schema:load
          bin/rails db:seed RAILS_ENV=test || true

      - name: Verify schema is up to date
        run: |
          bin/rails db:schema:dump
          git diff --exit-code db/schema.rb || (echo "::error::Database schema is out of sync. Run 'rails db:migrate' locally and commit the changes." && exit 1)

      - name: Compile assets
        run: bin/rails assets:precompile

      - name: Run unit and integration tests
        run: |
          bin/rails test --verbose

      - name: Run system tests
        run: |
          bin/rails test:system

      - name: Generate coverage report
        if: matrix.ruby-version == '3.4.4'  # Only upload coverage once
        run: |
          echo "Coverage report generated at coverage/index.html"
          ls -la coverage/ || echo "Coverage directory not found"
          cat coverage/coverage.xml | head -50 || echo "Coverage XML not found"

      - name: Upload coverage to Codecov
        if: matrix.ruby-version == '3.4.4'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage.xml
          flags: unittests
          name: book-of-business
          fail_ci_if_error: false
          verbose: true
          root_dir: ${{ github.workspace }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./tmp/test-results/*.xml
          flags: unittests
          name: book-of-business-tests
          fail_ci_if_error: false

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-artifacts-${{ matrix.ruby-version }}
          path: |
            tmp/screenshots/
            log/test.log
            coverage/
          retention-days: 7

  # Performance and database checks
  performance:
    name: Performance Checks
    runs-on: ubuntu-latest
    needs: [lint]

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Setup database
        run: |
          bin/rails db:create
          bin/rails db:schema:load

      - name: Check for N+1 queries
        run: |
          echo "Skipping N+1 query check - Prosopite will be added when models are implemented"

      - name: Analyze database queries
        run: |
          echo "Database query analysis will be added when models are implemented"

      - name: Check migration safety
        run: |
          echo "Skipping migration safety check - strong_migrations will be added when migrations are created"
          bin/rails db:migrate:status

  # Final status check
  status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [security, scan_js, lint, test, performance]
    if: always()

    steps:
      - name: Check CI Status
        run: |
          if [[ "${{ needs.security.result }}" != "success" ]] || \
             [[ "${{ needs.scan_js.result }}" != "success" ]] || \
             [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.performance.result }}" != "success" ]]; then
            echo "::error::One or more CI jobs failed"
            exit 1
          fi
          echo "All CI checks passed!"

  # Notify on failure (for main branch)
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [status]
    if: failure() && github.ref == 'refs/heads/main'

    steps:
      - name: Send notification
        run: |
          echo "::error::CI failed on main branch - notification would be sent here"
          # Add Slack/email notification here
